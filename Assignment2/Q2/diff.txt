diff --git a/Makefile b/Makefile
index 51540b291..19efd4be1 100644
--- a/Makefile
+++ b/Makefile
@@ -1094,7 +1094,7 @@ export MODORDER := $(extmod-prefix)modules.order
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index f30d6ae9a..078cc0ed5 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -361,6 +361,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
+440	common	sh_task_info	sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 75ac7f8ae..d8920d131 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1345,4 +1345,5 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_sh_task_info(int pid, char *filename);
 #endif
diff --git a/info/Makefile b/info/Makefile
new file mode 100644
index 000000000..fb74489cb
--- /dev/null
+++ b/info/Makefile
@@ -0,0 +1 @@
+obj-y:=sh_task_info.o
diff --git a/info/sh_task_info.c b/info/sh_task_info.c
new file mode 100644
index 000000000..a3fa21da8
--- /dev/null
+++ b/info/sh_task_info.c
@@ -0,0 +1,71 @@
+#include<linux/kernel.h>
+#include<linux/init.h>
+#include<linux/sched.h>
+#include<linux/syscalls.h>
+
+#include <linux/fs.h>
+#include <asm/segment.h>
+#include <asm/uaccess.h>
+#include <linux/buffer_head.h>
+
+#include <linux/errno.h>
+
+
+int write_to_file (char *path, char *str) {
+	struct file *fptr = NULL;
+	loff_t offset = 0;
+	mm_segment_t old_fs;
+
+	old_fs = get_fs();
+	set_fs(KERNEL_DS);
+
+	fptr = filp_open(path, O_WRONLY | O_CREAT, 0644);
+
+	if(fptr==NULL || IS_ERR(fptr)) {
+		// Error while opening file
+		return -PTR_ERR(fptr);
+	}
+
+	vfs_write(fptr, str, strlen(str), &offset);
+	vfs_fsync(fptr, 0);
+	filp_close(fptr, NULL);
+
+	set_fs(old_fs);
+	return 0;
+}
+
+
+SYSCALL_DEFINE2(sh_task_info, int, pid, char *, filename) {
+    struct task_struct *proces = NULL, *temp = NULL;
+	char str[200];
+  	char path[200];
+
+	if(!access_ok(filename, sizeof(char *)) || filename == NULL)
+		return -EFAULT;
+
+
+  	if(copy_from_user(path, filename, strnlen_user(filename, 200)))
+  		return -EFAULT;
+
+
+  	if(pid < 0) 
+  		return -EINVAL;
+  	
+
+    for_each_process(temp) {
+    	if((long)task_pid_nr(temp) == pid) {
+    		proces = temp;
+    		break;
+    	}  
+  	}
+
+  	if(proces == NULL) {
+  		return -EINVAL;
+  	}
+
+  	sprintf(str, "Process Details ->\nProcess: %s\nPID_Number: %ld\nProcess State: %ld\nPriority: %ld\nRT_Priority: %ld\nStatic Priority: %ld\nNormal Priority: %ld\n", proces->comm, (long)task_pid_nr(proces), (long)proces->state, (long)proces->prio, (long)proces->rt_priority, (long)proces->static_prio, (long)proces->normal_prio);
+
+  	printk(str);
+
+  	return write_to_file(path, str);
+}
